const VariantParser = require('./src/utils/variantParser');

// Mock the fixed addVariantsBulletPoint function
function addVariantsBulletPoint(htmlDescription, productData) {
  try {
    const formattedVariants = VariantParser.formatVariantsForDescription(productData.variants, productData.options);
    
    console.log(`üìã Formatted variants: "${formattedVariants}"`);
    
    // Always add a variants bullet point, even for empty/default variants
    let variantsText = formattedVariants;
    
    // Handle cases where variants are empty or default
    if (!formattedVariants || formattedVariants === 'Standard' || formattedVariants.trim() === '') {
      // Check if there are any variants at all
      if (productData.variants && productData.variants.length > 0) {
        const firstVariant = productData.variants[0];
        if (firstVariant.title === 'Default Title' || firstVariant.option1 === 'Default Title') {
          variantsText = 'Single Variant';
        } else {
          variantsText = 'Standard';
        }
      } else {
        variantsText = 'Standard';
      }
    }

    console.log(`üìã Final variants text: "${variantsText}"`);

    // Create the variants bullet point
    const variantsBullet = `<li>\n<strong>Available Variants:</strong> ${variantsText}</li>`;

    // Insert the variants bullet point after the first <ul> tag
    const result = htmlDescription.replace(
      /(<ul>)/,
      `$1\n  ${variantsBullet}`
    );
    
    console.log('‚úÖ Variants bullet point added successfully');
    return result;

  } catch (error) {
    console.error(`Error adding variants bullet point: ${error.message}`);
    return htmlDescription; // Return original if adding variants fails
  }
}

async function testFix() {
  console.log('üß™ Testing Fix for Initial Variants Issue\n');

  // Sample HTML description (as generated by Gemini without variants)
  const sampleHtml = `
<h2>About Test Diamond Ring</h2>
<p>Beautiful diamond ring with exceptional craftsmanship and timeless elegance.</p>
<ul>
  <li>Exquisite design with premium materials and superior craftsmanship</li>
  <li>Handcrafted with attention to detail and exceptional quality standards</li>
  <li>Expertly crafted by skilled artisans using traditional techniques</li>
  <li>Made with the finest materials and genuine gemstones</li>
  <li>Timeless design that combines elegance with contemporary style</li>
  <li><strong>Verified and Certified by Gemmologist Reza Piroznia</strong></li>
  <li>This product includes a <a href="https://rezagemcollection.ca/policies/refund-policy">7-day money-back guarantee</a></li>
</ul>`;

  console.log('üìù Original HTML (without variants):');
  console.log(sampleHtml);
  console.log('');

  // Test the same scenarios with the fix
  const scenarios = [
    {
      name: 'Empty variants array',
      productData: {
        title: 'Test Diamond Ring',
        variants: [],
        options: []
      }
    },
    {
      name: 'Single variant with Default Title',
      productData: {
        title: 'Test Diamond Ring',
        variants: [
          { title: 'Default Title', option1: 'Default Title', option2: null, option3: null }
        ],
        options: []
      }
    },
    {
      name: 'Single variant with meaningful title',
      productData: {
        title: 'Test Diamond Ring',
        variants: [
          { title: 'Small / Gold', option1: 'Small', option2: 'Gold', option3: null }
        ],
        options: [
          { name: 'Size', values: ['Small'] },
          { name: 'Material', values: ['Gold'] }
        ]
      }
    },
    {
      name: 'Multiple variants',
      productData: {
        title: 'Test Diamond Ring',
        variants: [
          { title: 'Small / Gold', option1: 'Small', option2: 'Gold', option3: null },
          { title: 'Medium / Gold', option1: 'Medium', option2: 'Gold', option3: null },
          { title: 'Large / Gold', option1: 'Large', option2: 'Gold', option3: null }
        ],
        options: [
          { name: 'Size', values: ['Small', 'Medium', 'Large'] },
          { name: 'Material', values: ['Gold'] }
        ]
      }
    }
  ];

  for (const scenario of scenarios) {
    console.log(`üîÑ Scenario: ${scenario.name}`);
    console.log(`   Variants: ${JSON.stringify(scenario.productData.variants.map(v => v.title))}`);
    console.log(`   Options: ${JSON.stringify(scenario.productData.options.map(o => ({ name: o.name, values: o.values })))}`);
    
    try {
      const result = addVariantsBulletPoint(sampleHtml, scenario.productData);
      
      // Check if variants were added
      const hasVariants = result.includes('<strong>Available Variants:</strong>');
      console.log(`   Has variants bullet point: ${hasVariants}`);
      
      if (hasVariants) {
        const variantsMatch = result.match(/<li>\s*<strong>Available Variants:<\/strong>.*?<\/li>/);
        console.log(`   Variants added: ${variantsMatch[0].replace(/<[^>]*>/g, '')}`);
      } else {
        console.log(`   ‚ùå No variants bullet point added`);
      }
      
      console.log('');
    } catch (error) {
      console.log(`   Error: ${error.message}`);
      console.log('');
    }
  }

  console.log('‚úÖ Fix Summary:');
  console.log('- Now ALL products get a variants bullet point on initial creation');
  console.log('- Empty variants show "Standard"');
  console.log('- Default Title variants show "Single Variant"');
  console.log('- Meaningful variants show their actual options');
  console.log('- This ensures consistency between initial creation and updates');
  console.log('');
  console.log('üöÄ Result:');
  console.log('- When you add a product, it will immediately have a variants bullet point');
  console.log('- When you update variants, the bullet point will be updated correctly');
  console.log('- No more missing variants information on initial product creation!');
}

// Run the test
if (require.main === module) {
  testFix();
}

module.exports = { testFix };
