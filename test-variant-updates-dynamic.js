const shopifyService = require('./src/services/shopifyService');
const VariantParser = require('./src/utils/variantParser');

async function testVariantUpdates() {
  console.log('üß™ Testing Variant Updates with Dynamic System\n');

  // Sample HTML description (as it would be generated by Gemini + dynamic variants)
  const sampleHtml = `
<h2>About Test Diamond Ring</h2>
<p>Beautiful diamond ring with exceptional craftsmanship and timeless elegance.</p>
<ul>
  <li><strong>Available Variants:</strong> Size: Small, Medium; Material: Gold</li>
  <li>Exquisite design with premium materials and superior craftsmanship</li>
  <li>Handcrafted with attention to detail and exceptional quality standards</li>
  <li>Expertly crafted by skilled artisans using traditional techniques</li>
  <li>Made with the finest materials and genuine gemstones</li>
  <li>Timeless design that combines elegance with contemporary style</li>
  <li><strong>Verified by Gemmologist Reza Piroznia</strong></li>
  <li>This product has <a href="https://rezagemcollection.ca/policies/refund-policy">7 days refund</a></li>
</ul>`;

  console.log('üìù Original Description:');
  console.log(sampleHtml);
  console.log('');

  // Test different variant update scenarios
  const scenarios = [
    {
      name: 'Adding new size variant',
      variants: 'Size: Small, Medium, Large; Material: Gold',
      description: 'Adding "Large" size option'
    },
    {
      name: 'Adding new material variant',
      variants: 'Size: Small, Medium, Large; Material: Gold, Platinum',
      description: 'Adding "Platinum" material option'
    },
    {
      name: 'Removing variants (Standard product)',
      variants: 'Standard',
      description: 'Removing all variants, making it a standard product'
    },
    {
      name: 'Changing variant format',
      variants: 'Size: XS, S, M, L, XL; Material: Gold, Silver',
      description: 'Changing to more detailed size options and adding Silver'
    },
    {
      name: 'Adding variants back',
      variants: 'Size: Small, Medium; Material: Gold',
      description: 'Adding variants back to a product that had none'
    }
  ];

  for (const scenario of scenarios) {
    console.log(`üîÑ Scenario: ${scenario.name}`);
    console.log(`   ${scenario.description}`);
    console.log(`   New variants: ${scenario.variants}`);
    
    try {
      const updatedHtml = shopifyService.updateVariantsBulletPoint(sampleHtml, scenario.variants);
      
      // Extract the variants line to show the change
      const variantsLine = updatedHtml.match(/<li><strong>Available Variants:<\/strong>.*?<\/li>/);
      
      if (variantsLine) {
        console.log(`   Result: ${variantsLine[0].replace(/<[^>]*>/g, '')}`);
      } else {
        console.log(`   Result: No variants bullet point (removed)`);
      }
      
      console.log('');
    } catch (error) {
      console.log(`   Error: ${error.message}`);
      console.log('');
    }
  }

  // Test the complete updateVariantsInDescription method (simulated)
  console.log('üîß Testing Complete Variant Update Process:');
  
  const mockProduct = {
    id: 12345,
    title: 'Test Diamond Ring',
    body_html: sampleHtml,
    variants: [
      { title: 'Small / Gold', option1: 'Small', option2: 'Gold' },
      { title: 'Medium / Gold', option1: 'Medium', option2: 'Gold' },
      { title: 'Large / Gold', option1: 'Large', option2: 'Gold' }
    ],
    options: [
      { name: 'Size', values: ['Small', 'Medium', 'Large'] },
      { name: 'Material', values: ['Gold'] }
    ]
  };

  const formattedVariants = VariantParser.formatVariantsForDescription(mockProduct.variants, mockProduct.options);
  console.log(`   Current product variants: ${formattedVariants}`);
  
  const updatedDescription = shopifyService.updateVariantsBulletPoint(mockProduct.body_html, formattedVariants);
  console.log(`   Updated description length: ${updatedDescription.length} characters`);
  
  // Check if variants were updated correctly
  const hasVariants = updatedDescription.includes('<strong>Available Variants:</strong>');
  console.log(`   Has variants bullet point: ${hasVariants}`);
  
  if (hasVariants) {
    const variantsMatch = updatedDescription.match(/<li><strong>Available Variants:<\/strong>.*?<\/li>/);
    console.log(`   Updated variants: ${variantsMatch[0].replace(/<[^>]*>/g, '')}`);
  }

  console.log('');
  console.log('‚úÖ Variant Update Test Completed Successfully!');
  console.log('');
  console.log('üìù Summary:');
  console.log('- Variant updates work seamlessly with the dynamic system');
  console.log('- Existing descriptions are updated without regenerating content');
  console.log('- System handles adding, removing, and modifying variants');
  console.log('- Only the variants bullet point is updated, rest of content preserved');
}

// Run the test
if (require.main === module) {
  testVariantUpdates();
}

module.exports = { testVariantUpdates };
